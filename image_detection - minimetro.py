import pygetwindow as gw
import pyautogui
import cv2
import numpy as np
import pytesseract
import time
import keyboard  # Pour la gestion des √©v√©nements clavier

# Chemin vers l'ex√©cutable Tesseract
# pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

def find_minimetro_window():
    """
    Tente de r√©cup√©rer la fen√™tre dont le titre contient 'Mini Metro'.
    Retourne l'objet fen√™tre ou l√®ve une exception si non trouv√©.
    """
    all_windows = gw.getWindowsWithTitle("Mini Metro")
    if not all_windows:
        raise Exception("Impossible de trouver une fen√™tre 'Mini Metro'.")
    # On suppose que la premi√®re fen√™tre correspond au jeu
    return all_windows[0]

def capture_game_screenshot(window):
    """
    Capture la zone correspondant √† la fen√™tre du jeu et renvoie l'image en format BGR.
    """
    left, top, width, height = window.left, window.top, window.width, window.height
    screenshot = pyautogui.screenshot(region=(left, top, width, height))
    img_bgr = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
    return img_bgr

def detect_river(img_bgr):
    """
    D√©tecte la pr√©sence de la rivi√®re dans l'image.
    La rivi√®re est identifi√©e comme une large zone bleue.
    Retourne un masque binaire (pixels blancs = zones bleues).
    """
    hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)
    lower_blue = np.array([90, 50, 50])
    upper_blue = np.array([130, 255, 255])
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
    mask_blue = cv2.morphologyEx(mask_blue, cv2.MORPH_CLOSE, kernel)
    return mask_blue

def detect_stations_and_demands(img_bgr):
    """
    D√©tecte les stations et, potentiellement, leurs demandes (ic√¥nes au-dessus).
    La d√©tection se base sur un seuillage en niveaux de gris et l'analyse des contours.
    Retourne une liste de dictionnaires contenant :
        - 'shape' : type de station (triangle, carre, cercle ou inconnu)
        - 'position' : position approximative (centre)
        - 'demand' : information sur la demande (√† impl√©menter)
    """
    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY)
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    stations_info = []
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area < 50:  # Filtrer le bruit
            continue

        peri = cv2.arcLength(cnt, True)
        approx = cv2.approxPolyDP(cnt, 0.02 * peri, True)
        x, y, w, h = cv2.boundingRect(approx)

        # Identification de la forme
        if len(approx) == 3:
            shape_type = "triangle"
        elif len(approx) == 4:
            shape_type = "carre"
        elif len(approx) >= 5:
            shape_type = "cercle"
        else:
            shape_type = "inconnu"

        stations_info.append({
            "shape": shape_type,
            "position": (x + w // 2, y + h // 2),
            "demand": "√†_implementer"  # TODO: Impl√©menter la d√©tection de la demande
        })

    return stations_info

def detect_lines(img_bgr):
    """
    D√©tecte les lignes d√©j√† pos√©es en recherchant diff√©rentes plages de couleurs.
    Pour chaque couleur, on identifie la pr√©sence de contours et on associe
    les segments aux stations (cette partie est √† affiner).
    Retourne un dictionnaire { couleur: "stations_relies_√†_implementer", ... }.
    """
    lines_info = {}
    color_ranges = {
        "rouge": ([0, 50, 50], [10, 255, 255]),
        # Pour le rouge, il peut √™tre n√©cessaire de g√©rer la plage haute (170-180)
        "jaune": ([25, 50, 50], [35, 255, 255]),
        "vert": ([40, 50, 50], [70, 255, 255]),
        "bleu_ligne": ([90, 50, 50], [130, 255, 255])  # √Ä distinguer de la rivi√®re
    }

    hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)
    for color_name, (lower, upper) in color_ranges.items():
        lower_np = np.array(lower, dtype=np.uint8)
        upper_np = np.array(upper, dtype=np.uint8)
        mask = cv2.inRange(hsv, lower_np, upper_np)
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if contours:
            # TODO: Associer les segments d√©tect√©s aux stations
            lines_info[color_name] = "stations_relies_√†_implementer"

    return lines_info

def detect_score(img_bgr):
    """
    D√©tecte le score affich√© dans le jeu en utilisant l'OCR sur une zone d√©finie.
    Retourne le score sous forme d'entier ou None si non d√©tect√©.
    """
    # Zone suppos√©e du score (√† ajuster)
    x, y, w, h = 50, 50, 100, 50
    roi = img_bgr[y:y + h, x:x + w]
    gray_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
    config = "--psm 7"  # Lecture d'une seule ligne
    text = pytesseract.image_to_string(gray_roi, config=config)
    score_str = "".join([c for c in text if c.isdigit()])
    return int(score_str) if score_str else None

def detect_resources(img_bgr):
    """
    D√©tecte les ressources affich√©es en bas de l‚Äô√©cran (locomotives, lignes pos√©es, etc.).
    La m√©thode utilis√©e ici repose sur l'OCR dans une zone fixe.
    Retourne un dictionnaire avec les informations (√† affiner selon l'UI).
    """
    height, width, _ = img_bgr.shape
    bottom_bar_height = 50  # Hauteur suppos√©e de la barre du bas
    x, y = 0, height - bottom_bar_height
    w, h = width, bottom_bar_height

    roi = img_bgr[y:y + h, x:x + w]
    gray_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
    text = pytesseract.image_to_string(gray_roi)

    # Exemple de parsing (√† adapter)
    numbers = [int(s) for s in text.split() if s.isdigit()]

    resources = {
        "locomotives": "√†_d√©terminer",
        "lignes_posees": "√†_d√©terminer",
        "lignes_dispo": "√†_d√©terminer",
        "lignes_verrou": "√†_d√©terminer",
        "tunnels": "√†_d√©terminer"
    }

    return resources

def main():
    print("üîµ En attente de Ctrl + R pour d√©marrer...")
    keyboard.wait("ctrl+r")
    print("üü¢ D√©tection en cours... Appuyez sur √âchap (Esc) pour arr√™ter.")

    try:
        window = find_minimetro_window()
        while not keyboard.is_pressed("esc"):
            img_bgr = capture_game_screenshot(window)

            # Analyse de la rivi√®re
            river_mask = detect_river(img_bgr)

            # Analyse des stations et des demandes
            stations_info = detect_stations_and_demands(img_bgr)

            # Analyse des lignes pos√©es
            lines_info = detect_lines(img_bgr)

            # D√©tection du score
            score = detect_score(img_bgr)

            # D√©tection des ressources
            resources = detect_resources(img_bgr)

            print("------------------------------------------------")
            print(f"Rivi√®re d√©tect√©e : {np.sum(river_mask > 0)} pixels bleus")
            print("Stations :", stations_info)
            print("Lignes :", lines_info)
            print("Score :", score)
            print("Ressources :", resources)
            print("------------------------------------------------\n")

            time.sleep(1)  # Pause entre chaque analyse

    except Exception as e:
        print(f"‚ùå Erreur : {e}")

    print("üî¥ Script arr√™t√©.")

if __name__ == "__main__":
    main()
